{"version":3,"sources":["logo.svg","components/Header/Header.js","components/SideBar/NavBar.js","components/ContentBar/InputContainer.js","components/ContentBar/ContentBar.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderBar","toggleMenuBar","className","IconButton","color","aria-label","edge","onClick","NavBar","toggleMenu","useState","active","setActive","onChangeMenu","e","currentTarget","id","clsx","isActive","InputContainer","props","poem","a","fetch","r","json","rjson","console","log","useEffect","initialSetPoets","ContentBar","Layout","setToggleMenuBar","bool","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,wQCK5B,SAASC,EAAT,GAAuC,IAAlBC,EAAiB,EAAjBA,cAChC,OACI,yBAAKC,UAAU,aACX,6BACQ,kBAACC,EAAA,EAAD,CAAYD,UAAU,iBAClBE,MAAM,YACNC,aAAW,cACXC,KAAK,QACLC,QAASN,GAET,kBAAC,IAAD,S,mCCTT,SAASO,EAAT,GAA+C,IAA7BC,EAA4B,EAA5BA,WAAYR,EAAgB,EAAhBA,cAAgB,EAC7BS,mBAAS,IADoB,mBAClDC,EADkD,KAC1CC,EAD0C,KAGnDC,EAAe,SAACC,GAClBb,EAAca,GAAG,GACjBF,EAAUE,EAAEC,cAAcC,KAG9B,OACI,yBAAKd,UAAWe,YAAK,iBAAD,eAAsB,WAAaR,KACnD,kBAAC,WAAD,CAAUP,UAAU,kBAChB,wBAAIc,GAAG,IAAIT,QAASM,GAChB,kBAAC,WAAD,CAAUK,SAAqB,MAAXP,EAAgBT,UAAWe,YAAK,OAAD,eAAY,WAAaR,KACpE,gDACCA,GAAc,4CAK/B,kBAAC,WAAD,CAAUP,UAAU,kBAChB,wBAAIc,GAAG,IAAIT,QAASM,GAChB,kBAAC,WAAD,CAAUK,SAAqB,MAAXP,EAAgBT,UAAWe,YAAK,OAAD,eAAY,WAAaR,KACpE,gDACCA,GAAc,4C,yCC1B5B,SAASU,EAAeC,GAAQ,IAAD,EAEjBV,mBAAS,IAFQ,mBAEnCW,EAFmC,sDAO1C,8BAAAC,EAAA,sEACkBC,MAAM,UADxB,cACQC,EADR,gBAEqBA,EAAEC,OAFvB,OAEQC,EAFR,OAIIC,QAAQC,IAAI,CAACF,UAJjB,4CAP0C,sBAc1C,OAXAG,qBAAU,YAHgC,mCAItCC,KACD,IAUC,yBAAK5B,UAAU,kBACZ,yBAAKA,UAAU,gBACV,yBAAKA,UAAU,kBACVmB,GAEL,yBAAKnB,UAAU,aACX,iCCpBL,SAAS6B,EAAWX,GAE/B,OACI,yBAAKlB,UAAU,mBACX,yBAAKA,UAAU,yBACZ,kBAAC,EAAD,OAEH,yBAAKA,UAAU,0BAAf,qB,MCLG,SAAS8B,EAAOZ,GAAQ,IAAD,EACKV,oBAAS,GADd,mBAC3BD,EAD2B,KACfwB,EADe,KAElC,SAAShC,EAAca,EAAGoB,GAKtBD,EAJqB,mBAAVC,GAIOzB,EAHGyB,GAMzB,OACI,yBAAKhC,UAAU,mBACX,kBAAC,EAAD,CAAQD,cAAeA,IACnB,yBAAKC,UAAU,sBACV,kBAAC,EAAD,CAAQO,WAAYA,EAAYR,cAAeA,IACpD,yBAAKC,UAAU,oBACX,kBAAC,EAAD,SCTLiC,MANf,WACE,OACE,kBAAC,EAAD,OCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.938118ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Header.css'; \r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport default function HeaderBar({ toggleMenuBar }) {\r\n    return (\r\n        <div className=\"headerBar\">\r\n            <div>\r\n                    <IconButton className=\"menuIconHeader\"\r\n                        color=\"secondary\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={toggleMenuBar}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { MenuList, MenuLink } from 'bloomer';\r\nimport './NavBar.css';\r\nimport clsx from 'clsx';\r\n\r\n\r\nexport default function NavBar({ toggleMenu, toggleMenuBar}) {\r\n    const [active, setActive] = useState(\"\");\r\n\r\n    const onChangeMenu = (e) => {\r\n        toggleMenuBar(e, false);\r\n        setActive(e.currentTarget.id );\r\n    }\r\n\r\n    return (\r\n        <div className={clsx(\"flex-item-menu\", { [\"expanded\"]: toggleMenu })} >\r\n            <MenuList className=\"menu-container\">\r\n                <li id='1' onClick={onChangeMenu}>\r\n                    <MenuLink isActive={active === '1'} className={clsx(\"menu\", { [\"expanded\"]: toggleMenu })}>\r\n                            <b>&emsp;PL  &emsp; </b>\r\n                            {toggleMenu && <span> Poems </span>}\r\n                    </MenuLink>     \r\n                </li>        \r\n            </MenuList>\r\n\r\n            <MenuList className=\"menu-container\">\r\n                <li id='2' onClick={onChangeMenu}>\r\n                    <MenuLink isActive={active === '2'} className={clsx(\"menu\", { [\"expanded\"]: toggleMenu })}>\r\n                            <b>&emsp;PL  &emsp; </b>\r\n                            {toggleMenu && <span> Maps </span>}\r\n                    </MenuLink>   \r\n                </li>          \r\n            </MenuList>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './InputContainer.css'; \r\n\r\nexport default function InputContainer(props) {\r\n\r\n    const [poem, setPoems] = useState([]);\r\n    useEffect(() => {\r\n        initialSetPoets();\r\n    }, []);\r\n    \r\n    async function initialSetPoets() {\r\n        let r = await fetch('/poems')\r\n        let rjson= await r.json();\r\n      //  setPoems(rjson);\r\n        console.log({rjson});\r\n    }\r\n    \r\n    return (\r\n        <div className=\"InputContainer\">\r\n           <div className=\"formControls\">\r\n                <div className=\"itemsLabelFlex\">\r\n                    {poem}\r\n                    </div>\r\n                <div className=\"itemsFlex\">\r\n                    <div>\r\n                       \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useCookies } from 'react';\r\nimport './ContentBar.css'; \r\nimport InputContainer from './InputContainer';\r\n\r\nexport default function ContentBar(props) {\r\n\r\n    return (\r\n        <div className=\"LayoutContainer\">\r\n            <div className=\"LayoutContainer-Input\">\r\n               <InputContainer />\r\n            </div>\r\n            <div className=\"LayoutContainer-Output\">\r\n                Output Container\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useCookies } from 'react';\r\nimport Header from './Header/Header.js';\r\nimport NavBar from './SideBar/NavBar.js';\r\nimport ContentBar from './ContentBar/ContentBar.js';\r\nimport './Layout.css'; \r\n\r\nexport default function Layout(props) {\r\n    const [toggleMenu, setToggleMenuBar] = useState(true);\r\n    function toggleMenuBar(e, bool) {\r\n        if (typeof(bool) === \"boolean\") {\r\n            setToggleMenuBar(bool);\r\n            return;\r\n        }\r\n        setToggleMenuBar(!toggleMenu);    \r\n    }\r\n\r\n    return (\r\n        <div className=\"LayoutContainer\">\r\n            <Header toggleMenuBar={toggleMenuBar} />\r\n                <div className=\"flex-out-container\">\r\n                     <NavBar toggleMenu={toggleMenu} toggleMenuBar={toggleMenuBar} />              \r\n                <div className=\"ContentContainer\">\r\n                    <ContentBar />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Route } from 'react-router';\nimport Home from './components/Home';\nimport Layout from './components/Layout';\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}