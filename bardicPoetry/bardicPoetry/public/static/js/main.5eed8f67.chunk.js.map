{"version":3,"sources":["logo.svg","bg.jpg","components/Header/Header.js","components/SideBar/NavBar.js","components/Home.js","components/ContentBar/OutputContainer.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderBar","toggleMenuBar","className","IconButton","color","aria-label","edge","onClick","document","URL","includes","NavBar","toggleMenu","useState","active","setActive","onChangeMenu","e","currentTarget","id","clsx","to","isActive","ListItem","button","key","ListItemIcon","ListItemText","primary","imgMyimageexample","require","divStyle","width","height","backgroundImage","backgroundSize","particlesParams","Topic","props","params","style","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","OutputContainer","graphHeight","setgraphHeight","graphWidth","setgraphWidth","selectedNodeId","setSelectedNodeId","graph","useRef","useEffect","networkClick","current","offsetWidth","offsetHeight","myConfig","d3","gravity","nodeHighlightBehavior","node","highlightStrokeColor","labelProperty","link","highlightColor","setPoets","setPatrons","nodes","setNodes","links","setLinks","setPoems","location","setLocation","category","setCategory","a","fetch","locResponse","json","locJson","console","log","categoryResponse","catJson","poetsResponse","poetsJson","map","poems","length","i","uid","size","poetpatrons","poet","patrons","source","target","reduce","acc","poetPoems","patronResponse","patronsJson","poets","poemsResponse","poemsJson","renderLabel","data","filter","arr","indexOf","eTokens","split","parseInt","classes","selectedNode","type","categoryIds","categories","details","filteredCategories","name","getCategory","join","extraDetails","poemText","filteredLocations","getLocation","location_id","ref","config","onClickNode","nodeId","onDoubleClickNode","Card","CardContent","Typography","gutterBottom","variant","component","CardActions","Button","url","toLowerCase","window","open","Layout","setToggleMenuBar","bool","exact","path","Home","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5eed8f67.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg.1dd034cc.jpg\";","import React from 'react';\r\nimport './Header.css'; \r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport default function HeaderBar({ toggleMenuBar }) {\r\n\r\n    let readURL = \"\";\r\n    const pageTitle = () => {\r\n        readURL = document.URL;\r\n        if (readURL.includes('/PoetPatron'))\r\n            return \"Poet Patron Network\";\r\n        \r\n        else\r\n            return \"Home\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"headerBar\">\r\n            <div>\r\n                    <IconButton className=\"menuIconHeader\"\r\n                        color=\"secondary\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={toggleMenuBar}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n            </div>\r\n            <div className=\"headerBreadCrumbs\">\r\n                    {pageTitle()}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { MenuList, MenuLink } from 'bloomer';\r\nimport './NavBar.css';\r\nimport clsx from 'clsx';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TimelineIcon from '@material-ui/icons/Timeline';\r\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nexport default function NavBar({ toggleMenu, toggleMenuBar}) {\r\n    const [active, setActive] = useState(\"\");\r\n\r\n    const onChangeMenu = (e) => {\r\n        toggleMenuBar(e, false);\r\n        setActive(e.currentTarget.id );\r\n    }\r\n\r\n    return (\r\n     <div className={clsx(\"flex-item-menu\", { [\"expanded\"]: toggleMenu })} >\r\n        <MenuList className=\"menu-container\">\r\n\r\n            <LinkContainer to={\"/\" }>\r\n                <li id='1' onClick={onChangeMenu}>\r\n                    <MenuLink isActive={active === '1'} className={clsx(\"menu\", { [\"expanded\"]: toggleMenu })}>\r\n                        <ListItem button key=\"Home\">\r\n                            <ListItemIcon>{<HomeIcon />}</ListItemIcon>\r\n                            <ListItemText primary=\"Home\" />\r\n                        </ListItem>\r\n                    </MenuLink>     \r\n                </li>        \r\n            </LinkContainer>\r\n\r\n            <LinkContainer to={\"/PoetPatron\" }>\r\n                <li id='2' onClick={onChangeMenu}>\r\n                    <MenuLink isActive={active === '2'} className={clsx(\"menu\", { [\"expanded\"]: toggleMenu })}>\r\n                    <ListItem button key=\"Poems\">\r\n                            <ListItemIcon>{<TimelineIcon />}</ListItemIcon>\r\n                            <ListItemText primary=\"Poet-Patron Network\" />\r\n                        </ListItem>\r\n                    </MenuLink>   \r\n                </li>   \r\n            </LinkContainer>       \r\n        </MenuList>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './Home.css'; \r\nimport Particles from 'react-particles-js';\r\n\r\nconst imgMyimageexample = require('../bg.jpg');\r\nconst divStyle = {\r\n  width: '100%',\r\n  height: '100%',\r\n  backgroundImage: `url(${imgMyimageexample})`,\r\n  backgroundSize: 'cover'  \r\n};\r\n\r\nconst particlesParams = {\r\n  \"particles\": {\r\n      \"number\": {\r\n          \"value\": 50\r\n      },\r\n      \"size\": {\r\n          \"value\": 3\r\n      }\r\n  },\r\n  \"interactivity\": {\r\n      \"events\": {\r\n          \"onhover\": {\r\n              \"enable\": true,\r\n              \"mode\": \"repulse\"\r\n          }\r\n      }\r\n  }\r\n};\r\n\r\nexport default function Topic(props) {\r\n    return (\r\n      <div>\r\n        <Particles params={particlesParams} />\r\n        <div className=\"cComponent\" style={divStyle} >\r\n          <div className=\"HomeTitle\">MACMORRIS</div>\r\n          <div className=\"HomeSubTitle\"> Connection Explorer</div>\r\n        </div> \r\n      </div>\r\n           \r\n    );\r\n}\r\n\r\n\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Graph } from \"react-d3-graph\";\r\nimport './OutputContainer.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport clsx from 'clsx';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function OutputContainer() {\r\n\r\n    const[graphContainer, setgraphContainer] = useState(0);\r\n    const[graphHeight, setgraphHeight] = useState(500);\r\n    const[graphWidth, setgraphWidth] = useState(800);\r\n    const[selectedNodeId, setSelectedNodeId] = useState(null);\r\n\r\n    const graph = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        networkClick();\r\n        setgraphWidth(graph.current.offsetWidth+250);\r\n        setgraphHeight(graph.current.offsetHeight);\r\n    }, []);\r\n\r\n    const myConfig = {\r\n        d3: {\r\n            gravity: -150,\r\n        },\r\n        height: graphHeight,\r\n        width: graphWidth,\r\n        nodeHighlightBehavior: true,\r\n        node: {\r\n            //strokeColor: \"000000\",\r\n            //strokeWidth: 5,\r\n            // color: \"#6bc36b\",\r\n            color: '#f14668',\r\n            highlightStrokeColor: \"black\",\r\n            labelProperty: \"name\",\r\n        },\r\n        link: {\r\n            color: \"#00000020\",\r\n            highlightColor: \"black\",\r\n        },\r\n    };\r\n\r\n   \r\n    const onClickNode = function(nodeId) {\r\n        setSelectedNodeId(nodeId);\r\n    };\r\n       \r\n    const onDoubleClickNode = function(nodeId) {\r\n        setSelectedNodeId(null);        \r\n    }\r\n\r\n    const [poets, setPoets] = useState([]);\r\n    const [patrons, setPatrons] = useState([]);\r\n    const [nodes, setNodes] = useState([]);\r\n    const [links, setLinks] = useState([]);\r\n    const [poems, setPoems] = useState([]);\r\n    const [location, setLocation] = useState([]);\r\n    const [category, setCategory] = useState([]);\r\n\r\n    async function networkClick() {\r\n        \r\n        let locResponse = await fetch (\"/locations\");\r\n        let locJson = await locResponse.json();\r\n        setLocation(locJson);\r\n        console.log({location});\r\n\r\n        let categoryResponse = await fetch(\"/categories\");\r\n        let catJson = await categoryResponse.json();\r\n        setCategory(catJson);\r\n        console.log({category});\r\n\r\n        let poetsResponse = await fetch('/poets');\r\n        let poetsJson = await poetsResponse.json();\r\n        let poetSize = poetsJson.map(e => e.poems.length);\r\n        poetsJson = poetsJson.map((e, i) => { e.uid = e.id; e.color = \"#5cace2\"; e.size = e.poems.length * 200; return e;})\r\n        console.log(poetsJson);\r\n        setPoets(poetsJson);\r\n       \r\n        let poetpatrons = poetsJson.map(poet => poet.patrons.map(e => ({source: poet.id, target : -e.id})) ).reduce((acc, e) => [...acc, ...e]);\r\n        let poetPoems = poetsJson.map(poet => poet.poems.map(e => ({source: poet.id, target : e.id + 1000 })) ).reduce((acc, e) => [...acc, ...e]);\r\n\r\n        console.log(poetpatrons);\r\n        console.log(poetPoems);\r\n        setLinks([...poetpatrons, ...poetPoems]);\r\n\r\n        let patronResponse = await fetch('/patrons');\r\n        let patronsJson= await patronResponse.json();       \r\n        \r\n        patronsJson = patronsJson.map((e,i)=> {e.uid = e.id; e.id = -e.id; e.size = e.poets.length * 200; return e;});\r\n        setPatrons(patronsJson);\r\n        \r\n        console.log({patronsJson});\r\n        let poemsResponse = await fetch('/poems');\r\n        let poemsJson= await poemsResponse.json();       \r\n        console.log({poemsJson});\r\n\r\n        poemsJson = poemsJson.map((e,i)=> {e.color=\"#00000020\"; e.renderLabel = false; e.uid = e.id; e.id = i + 1001; return e;});\r\n        setPoems(poemsJson);\r\n        setNodes([...poetsJson, ...patronsJson, ...poemsJson]);\r\n    }\r\n\r\n\r\n    // graph payload (with minimalist structure)\r\n    const cleanedLinks = links.map(e => `${e.source}:${e.target}`)\r\n                              .filter((e, i, arr) => arr.indexOf(e) === i)\r\n                              .map(e => { let eTokens = e.split(\":\"); return { source: parseInt(eTokens[0]), target: parseInt(eTokens[1])}; });\r\n    const data = {\r\n        nodes: nodes,\r\n        links: cleanedLinks,\r\n    };\r\n\r\n    // console.log(\"executed\", links.map(e => `${e.source}:${e.target}`), cleanedLinks);\r\n\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n\r\n    const getLocation = (id) => {\r\n        const filteredLocations = location.filter(e => e.id === id);\r\n        if (filteredLocations.length > 0) return filteredLocations[0].name;\r\n    }\r\n    const getCategory = (id) => {\r\n        const filteredCategories = category.filter(e => e.id === id);\r\n        if (filteredCategories.length > 0) return filteredCategories[0].name;\r\n    }\r\n    const getNodeType = (id) => {\r\n        if(id < 0) return \"Patron\";\r\n        if(id > 0) return (id > 1000? \"Poem\" : \"Poet\");\r\n    }\r\n\r\n    let selectedNode = nodes.filter(e => e.id === parseInt(selectedNodeId))[0];\r\n    if(selectedNode != null) {\r\n        selectedNode.type = getNodeType(selectedNode.id);\r\n        if(selectedNode.type === \"Poem\") {\r\n            let categoryIds = selectedNode.categories.map(e => e.id);\r\n            selectedNode.details = categoryIds.map(e => getCategory(e)).join(', ');\r\n            selectedNode.extraDetails = selectedNode.poemText;\r\n        }\r\n        else {\r\n            selectedNode.details = getLocation(selectedNode.location_id);\r\n            selectedNode.extraDetails = \"\";\r\n        }\r\n        \r\n    } else {\r\n        selectedNode = {name: \"\", details: \"\", type: \"\", extraDetails: \"\"};\r\n    }\r\n\r\n    const learnMoreClick = () => {\r\n        if(selectedNode != null) {\r\n            let url = 'http://localhost:3000/admin';\r\n            url += \"/\" + selectedNode.type.toLowerCase();\r\n            url += \"/\" + selectedNode.uid;\r\n            window.open(url, '_blank');\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className= \"OutputContainer\" ref={graph}>\r\n            <div>    \r\n                {\r\n                    nodes.length > 0 && \r\n                    <Graph \r\n                        id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                        data={data}\r\n                        config={myConfig}\r\n                        onClickNode={onClickNode}\r\n                        onDoubleClickNode={onDoubleClickNode}\r\n                      />\r\n                }\r\n            </div>\r\n            <div className={clsx(\"graphCards\", { [\"show\"]: selectedNode.id != null })} >\r\n                <Card className={classes.root}>\r\n                    <CardContent>\r\n                        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                        {selectedNode.type}\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                        {selectedNode.name}\r\n                        </Typography>\r\n                        <Typography className={classes.pos} color=\"textSecondary\">\r\n                        {selectedNode.details}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                        {selectedNode.extraDetails}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button size=\"small\" onClick={learnMoreClick}>Learn More</Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { useState, useCookies } from 'react';\r\nimport Header from './Header/Header.js';\r\nimport NavBar from './SideBar/NavBar.js';\r\nimport Home from './Home.js';\r\nimport ContentBar from './ContentBar/ContentBar.js';\r\nimport { Route } from 'react-router';\r\nimport OutputContainer from './ContentBar/OutputContainer';\r\nimport './Layout.css'; \r\n\r\n\r\nexport default function Layout(props) {\r\n    const [toggleMenu, setToggleMenuBar] = useState(true);\r\n    function toggleMenuBar(e, bool) {\r\n        if (typeof(bool) === \"boolean\") {\r\n            setToggleMenuBar(bool);\r\n            return;\r\n        }\r\n        setToggleMenuBar(!toggleMenu);    \r\n    }\r\n\r\n    return (\r\n        <div className=\"LayoutContainer\">\r\n            <Header toggleMenuBar={toggleMenuBar} />\r\n                <div className=\"flex-out-container\">\r\n                     <NavBar toggleMenu={toggleMenu} toggleMenuBar={toggleMenuBar} />              \r\n                <div className=\"ContentContainer\">\r\n                    <Route exact path='/' component={Home} />\r\n                    <Route exact path='/PoetPatron' component={OutputContainer} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Layout from './components/Layout';\n\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}